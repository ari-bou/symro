# SETS AND PARAMETERS
# --------------------------------------------------------------------------------------------------
# beginregion
param CUT_COUNT default 0;
set CUTS := 1..CUT_COUNT;
param obj_stored{ct in CUTS} default 0;
param is_feasible{ct in CUTS} default 0;
param INLET_stored{r in RAW_MATERIALS, t in TIMEPERIODS, s in SCENARIOS, ct in CUTS} default 0;
param lambda_INLET_FLOW_RATE{r in RAW_MATERIALS, t in TIMEPERIODS, s in SCENARIOS, ct in CUTS} default 0;
# endregion 


# VARIABLES
# --------------------------------------------------------------------------------------------------
# beginregion
var eta >= -1000000;
var GBD_F{s in SCENARIOS, ct in CUTS} = 0;
var GBD_G_0{r in RAW_MATERIALS, t in TIMEPERIODS, s in SCENARIOS, ct in CUTS} = ((INLET[r,t,s]) - (INLET_stored[r,t,s,ct]));
# endregion 


# OBJECTIVES
# --------------------------------------------------------------------------------------------------
# beginregion
minimize MASTER_OBJ: eta;
# endregion 


# CONSTRAINTS
# --------------------------------------------------------------------------------------------------
# beginregion
GBD_OPT_CUT{ct in CUTS: is_feasible[ct] = 1}: eta >= obj_stored[ct] + (sum {s in SCENARIOS} GBD_F[s,ct]) + (sum {r in RAW_MATERIALS, t in TIMEPERIODS, s in SCENARIOS} lambda_INLET_FLOW_RATE[r,t,s,ct] * GBD_G_0[r,t,s,ct]);
GBD_FBL_CUT{ct in CUTS: is_feasible[ct] = 0}: 0 >= obj_stored[ct] + (sum {r in RAW_MATERIALS, t in TIMEPERIODS, s in SCENARIOS} lambda_INLET_FLOW_RATE[r,t,s,ct] * GBD_G_0[r,t,s,ct]);
# endregion 

